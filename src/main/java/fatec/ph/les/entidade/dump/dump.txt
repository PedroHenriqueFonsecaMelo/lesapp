<body> 
<form action="/cliHome/singup" method="post" > 
<div><input name="firstName" placeholder="First name">
</div> <div><input name="email" placeholder="Email">
</div> <div><input name="password" placeholder="Password" type="password"></div> 
<div><input type="Submit"></div> </form>

<div class="col-12 col-sm-6 mb-3">
              <select class="form-select shadow-none" id="region" disabled required data-input>
                <option selected>Estado</option>
                <option value="AC">Acre</option>
                <option value="AL">Alagoas</option>
                <option value="AP">Amapá</option>
                <option value="AM">Amazonas</option>
                <option value="BA">Bahia</option>
                <option value="CE">Ceará</option>
                <option value="DF">Distrito Federal</option>
                <option value="ES">Espírito Santo</option>
                <option value="GO">Goiás</option>
                <option value="MA">Maranhão</option>
                <option value="MT">Mato Grosso</option>
                <option value="MS">Mato Grosso do Sul</option>
                <option value="MG">Minas Gerais</option>
                <option value="PA">Pará</option>
                <option value="PB">Paraíba</option>
                <option value="PR">Paraná</option>
                <option value="PE">Pernambuco</option>
                <option value="PI">Piauí</option>
                <option value="RJ">Rio de Janeiro</option>
                <option value="RN">Rio Grande do Norte</option>
                <option value="RS">Rio Grande do Sul</option>
                <option value="RO">Rondônia</option>
                <option value="RR">Roraima</option>
                <option value="SC">Santa Catarina</option>
                <option value="SP">São Paulo</option>
                <option value="SE">Sergipe</option>
                <option value="TO">Tocantins</option>
              </select>
            </div>

<div class="row mb-3">
            <div class="col-12 col-sm-6 mb-3 mb-md-0 form-floating">
              <input type="text" class="form-control shadow-none" id="city" name="city" placeholder="Cidade" disabled required data-input />
              <label for="city">Cidade</label>
            </div>
<div class="col-12 col-sm-6 mb-3 mb-md-0 form-floating">
              <input type="text" class="form-control shadow-none" id="address" name="address" placeholder="Rua" disabled required data-input />
              <label for="address">Rua</label>
            </div>
<div class="col-12 col-sm-6 form-floating">
              <input type="text" class="form-control shadow-none" id="neighborhood" name="neighborhood" placeholder="Bairro" disabled required data-input />
              <label for="neighborhood">Bairro</label>
            </div>
<div class="col-12 col-sm-6 form-floating">
              <input type="text" class="form-control shadow-none" id="number" name="number" placeholder="Digite o número da residência" disabled required />
              <label for="number">Digite o número da residência</label>
            </div>
<div class="col-12 col-sm-6 mb-3 mb-md-0 form-floating">
              <input type="text" class="form-control shadow-none" id="complement"  name="complement" placeholder="Digite o complemento" disabled data-input/>
              <label for="complement">Digite o complemento</label>
            </div>

gitignore:
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/


public Cliente(Map<String, ?> param) {
        System.out.println("Cliente part 1:  ");
        for (Field field : this.getClass().getDeclaredFields()) {
            for (Map.Entry<String, ?> entry : param.entrySet()) {
                if (field.getName().equalsIgnoreCase(entry.getKey())) {
                    try {
                        switch (field.getType().getSimpleName()) {
                            case "int":
                                field.set(this, Integer.parseInt((String) entry.getValue()));
                                break;
                            default:
                                field.set(this, entry.getValue().toString());
                                break;
                        }

                    } catch (IllegalArgumentException e) {
                        e.printStackTrace();
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }



Syntax error in SQL statement "insert into LIVRO  ( autor,  ano,  título,  editora,  edicao,  isbn,  npaginas,  sinopse,  altura,  largura,  categorias,  peso,  profundidade,  precificacao,  barras )
VALUES ('ph',2023,'jose',WB',1,123,200,' joao e maria', 12.20 , 2.20, 'terror[*]', 23,2, 22.2 ,1101 );"; 

SQL statement:
insert into LIVRO  ( autor,  ano,  título,  editora,  edicao,  isbn,  npaginas,  sinopse,  altura,  largura,  categorias,  peso,  profundidade,  precificacao,  barras )
VALUES ('ph',2023,'jose',WB',1,123,200,' joao e maria', 12.20 , 2.20, 'terror', 23,2, 22.2 ,1101 ); [42000-199] 42000/42000 (Help)


org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "insert into LIVRO  ( autor,  ano,  título,  editora,  edicao,  isbn,  npaginas,  sinopse,  altura,  largura,  categorias,  peso,  profundidade,  precificacao,  barras )
VALUES ('ph',2023,'jose',WB',1,123,200,' joao e maria', 12.20 , 2.20, 'terror[*]', 23,2, 22.2 ,1101 );"; 

SQL statement:
insert into LIVRO  ( autor,  ano,  título,  editora,  edicao,  isbn,  npaginas,  sinopse,  altura,  largura,  categorias,  peso,  profundidade,  precificacao,  barras )
VALUES ('ph',2023,'jose',WB',1,123,200,' joao e maria', 12.20 , 2.20, 'terror', 23,2, 22.2 ,1101 ); [42000-199]



insert into LIVRO  ( autor,  ano,  titulo,  editora,  edicao,  isbn,  npaginas,  sinopse,  altura,  largura,  categorias,  peso,  profundidade,  precificacao,  barras ) VALUES ('ph',2023,'jose','WB',1,123,200,' joao e maria', 12.20 , 2.20, 'terror', 23 , 2, 22.2 , 1101 );
insert into Cliente (senha , nome , datanasc , gen , email) VALUES  ('122' , '12' , '2023-03-06' , 'M' , '3@2' ); 
insert into Endereco (cliuid , pais , cep , estado , cidade , rua , bairro , numero , complemento , tiporesidencia) VALUES  ( 1  , 'BR' , '08780690' , 'SP' , 'Mogi das Cruzes' , 'Rua Professor Manoel Acelino de Mello' , 'Jardim Armênia' ,  21  , '21' , 'CASA' ); 
insert into Cartao (ncartao , bandeira , nomecli , cli_id , cv , preferencial) VALUES  ( 21  , 'Visa' , '21' ,  1  ,  22  ,  1  ); 



$(document).ready(function() {

  $('.color-choose input').on('click', function() {
      var headphonesColor = $(this).attr('data-image');

      $('.active').removeClass('active');
      $('.left-column img[data-image = ' + headphonesColor + ']').addClass('active');
      $(this).addClass('active');
  });

});







Map<String, ArrayList<String>> mapa = new HashMap<>();
        System.out.println(connectBD.EXE_Map("SELECT ORDEM_ID, LIVROID, QUANT FROM ORDDETAILS where CLI_ID = " +
                Integer.parseInt(init.getUid())
                + " AND ORDEM_ID = " + Integer.parseInt(ncard)));

        mapa.putAll(connectBD.EXE_Map("SELECT ORDEM_ID, LIVROID, QUANT FROM ORDDETAILS where CLI_ID = " +
                Integer.parseInt(init.getUid())
                + " AND ORDEM_ID = " + Integer.parseInt(ncard)));

        mapa.putAll(
                connectBD.EXE_Map("SELECT PRECIFICACAO FROM LIVRO where idlivro = " + mapa.get("LIVROID").get(0)));
        mapa.putAll(
                connectBD.EXE_Map("SELECT TOTAL FROM ORDEM where ORDEM_ID = " + mapa.get("ORDEM_ID").get(0)));
        mapa.putAll(
                connectBD.EXE_Map(
                        "SELECT VALOR, PAY_ID, CARTAOID FROM ORDPAY where ORDEM_ID = " + mapa.get("ORDEM_ID").get(0)));

        for (Entry<String, ArrayList<String>> endereco : mapa.entrySet()) {
            System.out.println(endereco.getKey() + " !! " + endereco.getValue());
        }

        String updateDetails = "UPDATE ORDDETAILS set QUANT = "
                + (Integer.parseInt(mapa.get("QUANT").get(0)) - 1)
                + " where ORDEM_ID = " + mapa.get("ORDEM_ID").get(0);

        String updateORDEM = "UPDATE ORDEM set TOTAL = "
                + ((Float.parseFloat(mapa.get("TOTAL").get(0))
                        - Float.parseFloat(mapa.get("PRECIFICACAO").get(0))))
                + " where ORDEM_ID = " + mapa.get("ORDEM_ID").get(0);



//////////////////////
 /* 0 */
        collum.addAll(connectBD.mrows("SELECT ORDEM_ID, LIVROID, QUANT FROM ORDDETAILS where CLI_ID = " +
                Integer.parseInt(init.getUid())
                + " AND ORDEM_ID = " + Integer.parseInt(ncard)));
        /* 1 */
        collum.addAll(connectBD.mrows("SELECT ORDEM_ID, LIVROID FROM ORDDETAILS where CLI_ID = "
                + Integer.parseInt(init.getUid())
                + " AND ORDEM_ID = " + Integer.parseInt(ncard)));
        /* 2 */
        collum.addAll(connectBD.mrows("SELECT PRECIFICACAO FROM LIVRO where idlivro = " + collum.get(1).get(1)));
        /* 3 */
        collum.addAll(connectBD.mrows("SELECT TOTAL FROM ORDEM where ORDEM_ID = " + collum.get(1).get(0)));
        /* 4 */
        collum.addAll(
                connectBD.mrows("SELECT VALOR, PAY_ID, CARTAOID FROM ORDPAY where ORDEM_ID = " + collum.get(1).get(0)));



CUPON - ADD BUTTON


private static Set<Class<?>> findAllClassesUsingClassLoader(String packageName) {
        InputStream stream = ClassLoader.getSystemClassLoader().getResourceAsStream(packageName);
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));

        return reader.lines()
                .filter(line -> line.endsWith(".class"))
                .map(line -> getClass(line, packageName))
                .collect(Collectors.toSet());

    }

private static Class<?> getClass(String className, String packageName) {
        try {
            return Class.forName(packageName + "."
                    + className.substring(0, className.lastIndexOf('.')));
        } catch (ClassNotFoundException e) {
            // handle the exception
        }
        return null;
    }

Set<String> array = fatec.ph.les.servicos.init.fileDirectory(
                "copy path");

for (String iterable_element : array) {
            System.out.println("-------------------\n");
            System.out.println(iterable_element);
            System.out.println("\n-------------------");
        }


[Cartao]<>-> [IndexController ]
[Categoria]<>-> [IndexController ]
[Cliente]<>-> [IndexController ]
[Endereco]<>-> [IndexController ]
[Livro]<>-> [IndexController ]
[connectBD]<>-> [IndexController ]

[Cartao]<>-> [cartaoController ]

[Cartao]<>-> [cartController ]
[init]<>-> [cartController ]
[Endereco]<>-> [cartController ]
[Livro]<>-> [cartController ]
[connectBD]<>-> [cartController ]

[Cartao]<>-> [clienteController ]
[init]<>-> [clienteController ]
[Endereco]<>-> [clienteController ]
[Livro]<>-> [clienteController ]
[connectBD]<>-> [clienteController ]

[Cliente]<>-> [admin ]
[Livro]<>-> [admin ]
[connectBD]<>-> [admin ]
[ManyToMany]<>-> [admin ]

[Endereco]<>-> [enderecoController ]

[cartaoController |  -aux1: String; -aux2: int | update();del();cartaoSingupForm();enderecoSingup()]

[clienteController |  -uidcli: String; +enderecos: ArrayList; +row: ArrayList; +rowDetails: ArrayList | update();clear();del();logCli();toAdmin();loginCli();cliModel();cliOrdens();CliForm();enderecoSingup();insCli();cliProfile();cliProfile2();reqTroca();addCartao();cartaoSingup();addEndereco()]

[admin |  +row: ArrayList; +orderArray: ArrayList; +trocaArray: ArrayList; +clientes: ArrayList; +mapa: Map; +valorDividido: float | name();update();clear();data();delete();AdminBaseModel();ModelAddOderm();execUpdate();DadoPreparoMapa();updateDetails();ModelAddTroca();trocar();updateORDEM();updatePay();ModelAddCli();aceito();pesquisa();recusado()]

[enderecoController |  -aux1: String | update();del();enderecoSingup();enderecoSingupForm()]

[IndexController |  -init: boolean | index();init();shop();aboutlivro();pesquisaLivro()]

[cartController |  -df: DecimalFormat; -ls: Map; -arrayCartao: Map; -map: NavigableMap; -mudanca: boolean; -uid: String; -total: float; +cupon: ArrayList; -lista: ArrayList; +enderecos2: ArrayList; -arrayCartao2: ArrayList; +enderecos: ArrayList; -arrayEndereco: ArrayList | clear();order();cartTotal();modelagem();cartAdd();addCartaoCart();removeLivroCart();insertDetails();execCart();removeCartaoCart();insertpay()]





[connectBD]<>-> [ordercartoes ]
[connectBD]<>-> [orderdetails ]

[Init]<>-> [Cartao ]
[connectBD]<>-> [Cartao ]

[connectBD]<>-> [Categoria ]
[connectBD]<>-> [Livro ]

[Init]<>-> [Cliente ]
[connectBD]<>-> [Cliente ]

[Init]<>-> [Endereco ]
[connectBD]<>-> [Endereco ]


[order |  -idorder: int; -cli_id: int; -valorTotal: float; -status: String; -enderecoentrega: String]

[ordercartoes |  -idordercartoes: int; -orderid: int; -cartao_id: int; -vezes: int | InserirCBD()]

[orderdetails |  -idorderdetails: int; -orderid: int; -livro_id: int; -quant: int | InserirCBD()]

[Categoria |  -idCategoria: int; -categorias: String | cliUID();CreateTable();categoriaId()]
[Cartao |  -idCartao: int; -ncartao: int; -bandeira: String; -nomecli: String; -cli_id: int; -cv: int; -preferencial: int | equals();hashCode();update();InserirCBD();cartao();cartaoCLIUID();cartaoCLIUID();Deletar();Deletar();cliUID();toString2();CreateTable()]
[Livro |  -idlivro: int; -autor: String; -ano: int; -titulo: String; -editora: String; -edicao: int; -isbn: int; -npaginas: int; -sinopse: String; -altura: float; -largura: float; -categorias: String; -peso: float; -profundidade: float; -precificacao: float; -barras: String; -quant: int | equals();hashCode();info();livroCLIUID();livro();livroPesquisa();InserirCBD();toString2();CreateTable()]

[Endereco |  -idEndereco: int; -cliuid: int; -pais: String; -cep: String; -estado: String; -cidade: String; -rua: String; -bairro: String; -numero: int; -complemento: String; -tiporesidencia: String | update();InserirCBD();endereco();Deletar();Deletar();cliUID();toString2();CreateTable();argsParse2();argsParse()]

[Cliente |  -idCliente: int; -senha: String; -nome: String; -datanasc: String; -gen: String; -email: String | equals();hashCode();update();info();cliente();InserirCBD();Deletar();cliUID();cliUID();toString2();CreateTable();DeletarCBD()]

[Cartao |  -idCartao: int; -ncartao: int; -bandeira: String; -nomecli: String; -cli_id: int; -cv: int; -preferencial: int | equals();hashCode();update();InserirCBD();cartao();cartaoCLIUID();cartaoCLIUID();Deletar();Deletar();cliUID();toString2();CreateTable()]



Deverá ser apresentado a implementação das funcionalidades abaixo::
Venda de diversos itens de diferentes produtos;
Pagamento utilizando diversos cartões e cupons de troca;
Uso de endereços pré-cadastrados ou inserção de um novo endereço no momento da venda;
Uso de cartões de crédito pré-cadastrados ou inserção de um novo cartão de crédito no momento da venda;
Cálculo de frete;
Solicitação de troca pelo cliente;
Aprovação/recusa de troca pelo administrador;
Geração de cupom de troca;
Alteração de status, considerando o workflow: EM PROCESSAMENTO, PAGAMENTO REALIZADO / PAGAMENTO NÃO PROCESSADO, EM TRANSPORTE, ENTREGUE, TROCA SOLICITADA, TROCA APROVADA / NÃO APROVADA, PRODUTO (A SER TROCADO) RECEBIDO, TROCA FINALIZADA;
Baixa e entrada no estoque (quando produto trocado).

Obs: Não é preciso fazer nenhum tipo de integração com meio de pagamento ou correios, frete e pagamento pode ser simulado com uma tabela de banco de dados ou serviço "mockado".

\\\\
[Cliente | idCliente INT PRIMARY KEY AUTO_INCREMENT;  senha VARCHAR(100); nome VARCHAR(100);  datanasc DATE; gen VARCHAR(100); email VARCHAR(100)]


[Endereco | idEndereco INT PRIMARY KEY AUTO_INCREMENT;  cliuid INT;  pais VARCHAR(100);  cep VARCHAR(100);  estado VARCHAR(100);  cidade VARCHAR(100);  rua VARCHAR(100); bairro VARCHAR(100);  numero INT; complemento VARCHAR(100); tiporesidencia VARCHAR(100)]

[Cartao | idCartao INT PRIMARY KEY AUTO_INCREMENT;  ncartao INT;  bandeira VARCHAR(100);  nomecli VARCHAR(100);  cli_id INT;  cv INT;  preferencial INT]

[Livro | idlivro INT PRIMARY KEY AUTO_INCREMENT;  autor VARCHAR(100);  ano INT;  titulo VARCHAR(100);  editora VARCHAR(100);  edicao INT;  isbn INT;  npaginas INT; sinopse VARCHAR(100);  altura NUMERIC(20, 2);  largura NUMERIC(20, 2);  categorias VARCHAR(100);  peso NUMERIC(20, 2);  profundidade NUMERIC(20, 2);  precificacao NUMERIC(20, 2);  barras VARCHAR(100);  quant INT]

[ordem | ordem_id int primary key AUTO_INCREMENT; cli_id int; total NUMERIC(20,2); status VARCHAR(100); endereco VARCHAR(100); data_pedido DATE]

[ordDetails | details_id int primary key AUTO_INCREMENT; ordem_id int; livroid int; quant int]

[ordPay | pay_id int primary key AUTO_INCREMENT; ordem_id int; cartaoid int; valor NUMERIC(20, 2)]

[TROCA | TROCA_id int primary key AUTO_INCREMENT; ordem_id int unique; quantidade_troca int; valorTroca NUMERIC(20, 2)]


[TROCA ]<-++[ordem ]
[ordDetails ]<-++[ordem ]
[ordDetails ]<-++[Livro ]
[ordPay ]<-++[ordem ]
[ordem ]<-++[Cliente ]
[Cliente ]++->[Endereco ]
[Cliente ]++->[Cartao ]


//
// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table cliente {
    IDCLIENTE INT [primary key]
    SENHA VARCHAR(100)
    NOME VARCHAR(100)
    DATANASC DATE
    GEN VARCHAR(100)
    EMAIL VARCHAR(100)
}

Table ENDERECO {

    IDENDERECO INT [primary key]
    CLIUID INT
    PAIS VARCHAR(100)
    CEP VARCHAR(100)
    ESTADO VARCHAR(100)
    CIDADE VARCHAR(100)
    RUA VARCHAR(100)
    BAIRRO VARCHAR(100)
    NUMERO INT
    COMPLEMENTO VARCHAR(100)
    TIPORESIDENCIA VARCHAR(100)
}

Table CARTAO {
  IDCARTAO int [primary key]
  NCARTAO INT
  BANDEIRA VARCHAR(100)
  NOMECLI VARCHAR(100)
  CLI_ID INT
  CV  INT
  PREFERENCIAL INT
}

Table LIVRO {
  IDLIVRO int [primary key]
  AUTOR VARCHAR(100)
  ANO INT
  TITULO VARCHAR(100)
  EDITORA VARCHAR(100)
  EDICAO INT
  ISBN INT
  NPAGINAS INT
  SINOPSE VARCHAR(100)
  ALTURA NUMERIC(20, 2)
  LARGURA NUMERIC(20, 2)
  CATEGORIAS VARCHAR(100)
  PESO NUMERIC(20, 2)
  PROFUNDIDADE NUMERIC(20, 2)
  PRECIFICACAO NUMERIC(20, 2)
  BARRAS VARCHAR(100)
  QUANT INT
}

Table CUPONS {
  CUPONS_ID int [primary key]
  CLI_ID INT
  DESCONTO NUMERIC(20, 2)
}

Table ORDEM {
  ORDEM_ID int [primary key]
  CLI_ID INT
  TOTAL NUMERIC(20, 2)
  STATUS VARCHAR(100)
  ENDERECO  VARCHAR(100)
  DATA_PEDIDO DATE
}

 TABLE ORDDETAILS {
    DETAILS_ID INT [primary key]
    CLI_ID INT
    ORDEM_ID INT
    LIVROID INT
    QUANT INT
}

TABLE ORDPAY{
    PAY_ID INT  [primary key]
    CLI_ID INT
    ORDEM_ID INT
    CARTAOID INT
    VALOR NUMERIC(20, 2)
}

TABLE TROCA{
    TROCA_ID INT [primary key]
    ORDEM_ID INT
    QUANTIDADE_TROCA INT
    VALORTROCA NUMERIC(20, 2)
}

Ref: ORDEM.ORDEM_ID > cliente.IDCLIENTE // many-to-one

Ref: ORDEM.ORDEM_ID > ORDDETAILS.ORDEM_ID

Ref: ORDEM.ORDEM_ID > ORDPAY.ORDEM_ID

Ref: ORDEM.ORDEM_ID > TROCA.TROCA_ID

Ref: cliente.IDCLIENTE > ENDERECO.CLIUID // many-to-one

Ref: cliente.IDCLIENTE > CARTAO.CLI_ID // many-to-one

Ref: LIVRO.IDLIVRO > ORDDETAILS.LIVROID // many-to-one





